@model CashTrack.Pages.Shared.AnnualIncomeExpenseChart
@{
}
<script>
    const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
    const @Model.ElementId = new Chart(@Model.VariableName, {
        type: 'line',
        data: {
            labels: @Html.Raw(@Model.Labels),
            datasets: [
                {
                    label: 'Expenses',
                    data: @Model.ExpenseDataset,
                    color: 'rgba(0, 0, 0, 0)',
                    backgroundColor: colorizeExpenses(),
                    borderColor: colorizeExpenses(),
                    borderWidth: 5,
                    fill: true,
                    cubicInterpolationMode: 'monotone',
                    tension: 1,
                    segment: {
                        borderColor: colorizeExpenseSegment(),
                        backgroundColor: colorizeExpenseSegment()
                    }
                },
                {
                    label: 'Income',
                    data: @Model.IncomeDataset,
                    color: 'rgba(0, 0, 0, 0)',
                    backgroundColor: colorizeIncome(),
                    borderColor: colorizeIncome(),
                    borderWidth: 5,
                    fill: true,
                    cubicInterpolationMode: 'monotone',
                    tension: 1,
                    segment: {
                        borderColor: colorizeIncomeSegment(),
                        backgroundColor: colorizeIncomeSegment()
                    }
                }
                ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                tooltip: {
                    callbacks: {
                        footer: footer,
                    }
                },
                title: {
                    display: true,
                    text: '@Model.Title'
                },
                legend: {
                    display: false,
                    position: 'top',
                    align: 'center',
                    labels:{
                        filter: (item, chart) => !item.text.includes('Savings')
                    }
                },
            }
        },
    });
    function colorizeIncomeSegment() {
        return (ctx) => {
            const i = ctx.p0DataIndex;
            const v = ctx.p0.raw;
            if (i >= @Model.MonthBudgetIncomeDataBegins)
                return @Html.Raw(Model.BudgetedIncomeColor)
            else if (i < @Model.MonthBudgetIncomeDataBegins)
                return @Html.Raw(Model.IncomeColor)
        }
    };
    function colorizeExpenseSegment() {
        return (ctx) => {
            const i = ctx.p0DataIndex;
            const v = ctx.p0.raw;
            if (i >= @Model.MonthBudgetExpenseDataBegins)
                return @Html.Raw(Model.BudgetedExpenseColor)
            else if (i < @Model.MonthBudgetExpenseDataBegins)
                return @Html.Raw(Model.ExpenseColor)
        }
    };
    function colorizeIncome() {
        return (ctx) => {
            const i = ctx.index;
            const v = ctx.raw;
            if (i > @Model.MonthBudgetIncomeDataBegins)
                return @Html.Raw(Model.BudgetedIncomeColor)
            else if (i < @Model.MonthBudgetIncomeDataBegins)
                return @Html.Raw(Model.IncomeColor)
        }
    };
    function colorizeExpenses() {
        return (ctx) => {
            const i = ctx.index;
            const v = ctx.raw;
            if (i > @Model.MonthBudgetExpenseDataBegins)
                return @Html.Raw(Model.BudgetedExpenseColor)
            else if (i < @Model.MonthBudgetExpenseDataBegins)
                return @Html.Raw(Model.ExpenseColor)
        }
    };
    function footer(tooltipItems) {
        const object = tooltipItems[0];
        const index = parseInt(object.dataIndex);
        if(object.dataset.label === "Income")
        {
            const currentTotal = object.dataset.data[index];
            const previousValue = object.dataset.data[index - 1];
            const earned = (currentTotal - previousValue).toFixed(0);
            if (index > @Model.MonthBudgetIncomeDataBegins)
                return `Projected Monthly Income: ${earned}`;
            else if (isNaN(earned) && index < @Model.MonthBudgetIncomeDataBegins)
                return `Earned: ${currentTotal}`;
            else if (!isNaN(earned) && index <= @Model.MonthBudgetIncomeDataBegins)
                return `Earned: ${earned}`;
        }
        else if(object.dataset.label === "Expenses")
        {
            const currentTotal = object.dataset.data[index];
            const previousValue = object.dataset.data[index - 1];
            const amount = (currentTotal - previousValue).toFixed(0);
            if (index > @Model.MonthBudgetExpenseDataBegins)
                return `Projected Monthly Expenses: ${amount}`;
            else if (isNaN(amount) && index < @Model.MonthBudgetExpenseDataBegins)
                return `Spent: ${currentTotal}`;
            else if (!isNaN(amount) && index <= @Model.MonthBudgetExpenseDataBegins)
                return `Spent: ${amount}`;
        }
    };
</script>