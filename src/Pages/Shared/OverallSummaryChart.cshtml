@model CashTrack.Pages.Shared.OverallSummaryChart
@{
}
<script>
    const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
    const @Model.ElementId = new Chart(@Model.VariableName, {
        type: 'bar',
        data: {
            labels: @Html.Raw(@Model.Labels),
            datasets: [
            @if (!string.IsNullOrEmpty(Model.BudgetedIncome))
            {
                <text>
            {
                label: 'Budgeted Income',
                data: @Model.BudgetedIncome,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.BudgetedIncomeColor),
                borderColor: @Html.Raw(Model.BudgetedIncomeColor),
                borderWidth: 1,
                stack: 'Stack 0'
            },
                </text>
            }
            {
                label: 'Realized Income',
                data: @Model.RealizedIncome,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.RealizedIncomeColor),
                borderColor: @Html.Raw(Model.RealizedIncomeColor),
                borderWidth: 1,
                stack: 'Stack 1'
            },
            @if (!string.IsNullOrEmpty(Model.BudgetedExpenses))
            {
                <text>
            {
                label: 'Budgeted Expenses',
                data: @Model.BudgetedExpenses,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.BudgetedExpensesColor),
                borderColor: @Html.Raw(Model.BudgetedExpensesColor),
                borderWidth: 1,
                stack: 'Stack 0'
            },
                </text>
            }
            {
                label: 'Realized Expenses',
                data: @Model.RealizedExpenses,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.RealizedExpensesColor),
                borderColor: @Html.Raw(Model.RealizedExpensesColor),
                borderWidth: 1,
                stack: 'Stack 1'
            },
            @if (!string.IsNullOrEmpty(Model.BudgetedSavings))
            {
                <text>
            {
                label: 'Budgeted Savings',
                data: @Model.BudgetedSavings,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.BudgetedSavingsColor),
                borderColor: @Html.Raw(Model.BudgetedSavingsColor),
                borderWidth: 1,
                stack: 'Stack 0'
            },
                </text>
            }
            {
                label: 'Realized Savings',
                data: @Model.RealizedSavings,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: colorize(),
                borderColor: colorize(),
                borderWidth: 1,
                stack: 'Stack 1'
            }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                intersect: false,
                mode: 'point'
            },
            scales: {
                x: {
                    stacked: true,
                },
                y: {
                    stacked: true
                }
            },
            plugins: {
                legend: {
                    display: false,
                    position: 'bottom',
                },
                title: {
                    display: false,
                    text: '@Model.Title'
                }
            }
        }
        });
function colorize() {
        return (ctx) => {
            const v = ctx.raw;
            const c = v < 0 ? @Html.Raw(Model.InTheRedSavingsColor)
            : @Html.Raw(Model.RealizedSavingsColor);
    return c;
  };
};
        </script>