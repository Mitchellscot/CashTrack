@using System.Text.Json
@model CashTrack.Pages.Shared._ChartPartial
@{
    var color = Model.UseDefaultColor ? Model.DefaultColor : Model.ColorArray;
    var titleExists = string.IsNullOrEmpty(Model.Title) ? false : true;
}
@if (Model.ChartType == ChartType.Bar)
{
    <script>
            const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
            const @Model.ElementId = new Chart(@Model.VariableName, {
            type: 'bar',
            data: {
                labels: @Model.Labels,
                datasets: [{
                    label: 'Total',
                    data: @Model.Dataset,
                    color: 'rgba(0, 0, 0, 0)',
                    backgroundColor:
        @Html.Raw(color)
                    ,
                    borderColor:
        @Html.Raw(color)
                    ,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: @Model.Responsive.ToString().ToLower(),
                plugins: {
          legend: {
            display: false,
            position: 'top',
          },
          title: {
            display: @titleExists.ToString().ToLower(),
            text: '@Model.Title'
          }
        }
            }
        });
    </script>
}
@if (Model.ChartType == ChartType.Pie)
{
    <script>
            const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
            const @Model.ElementId = new Chart(@Model.VariableName, {
            type: 'pie',
            data: {
                labels: @Html.Raw(@Model.Labels),
                datasets: [{
                    label: 'Total',
                    data: @Model.Dataset,
                    color: 'rgba(0, 0, 0, 0)',
                    backgroundColor:
        @Html.Raw(color)
                    ,
                    borderColor:
        @Html.Raw(color)
                    ,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: @Model.Responsive.ToString().ToLower(),
                plugins: {
          legend: {
            display: true,
            position: 'bottom',
          },
          title: {
            display: @titleExists.ToString().ToLower(),
            text: '@Model.Title'
          }
        }
            }
        });
    </script>
}
@if (Model.ChartType == ChartType.Donut)
{
    <script>
            const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
            const @Model.ElementId = new Chart(@Model.VariableName, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(@Model.Labels),
                datasets: [{
                    label: 'Total',
                    data: @Model.Dataset,
                    color: 'rgba(0, 0, 0, 0)',
                    backgroundColor:
        @Html.Raw(color)
                    ,
                    borderColor:
        @Html.Raw(color)
                    ,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: @Model.Responsive.ToString().ToLower(),
                plugins: {
          legend: {
            display: true,
            position: 'bottom',
          },
          title: {
            display: @titleExists.ToString().ToLower(),
            text: '@Model.Title'
          }
        }
            }
        });
    </script>
}
@if (Model.ChartType == ChartType.BarAndLine)
{
    <script>
                const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
                const @Model.ElementId = new Chart(@Model.VariableName, {
                    type: 'bar',
                data: {
                    labels: @Model.Labels,
                    datasets: [{
                        label: 'Total',
                        yAxisID: 'y',
                        order: 2,
                        data: @Model.Dataset,
                        type: 'bar',
                        color: 'rgba(0, 0, 0, 0)',
                        backgroundColor:
        @Html.Raw(color)
                        ,
                        borderColor:
        @Html.Raw(color)
                        ,
                        borderWidth: 1
                    },
                    {
                        label: 'Count',
                        yAxisID: 'y1',
                        order: 1,
                        data: @Model.Dataset2,
                        type: 'line',
                        color: 'rgba(0, 0, 0, 0)',
                        backgroundColor: "rgba(44, 62, 88, .8)",
                        borderColor:"rgba(44, 62, 88, .8)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: @Model.Responsive.ToString().ToLower(),
                        interaction: {
          mode: 'index',
          intersect: false,
        },
        stacked: true,
         scales: {
             xAxes: [{display: true, stacked:true, scaleLabel: {display: false, labelString: 'time'}}],
          y: {
            type: 'linear',
            display: true,
            position: 'left',
            grid: {
              drawOnChartArea: false,
            },
          },
          y1: {
            type: 'linear',
            display: true,
            position: 'right',
            offset: true,
            grid: {
              drawOnChartArea: false,
            },
          },
        },
                    plugins: {
              legend: {
                display: false,
                position: 'top',
              },
              title: {
                display: @titleExists.ToString().ToLower(),
                text: '@Model.Title'
              }
            }
                }
            });
    </script>
}