@model CashTrack.Pages.Shared.AnnualMonthlySummaryChart
@{
}
<script>
    const @Model.VariableName = document.getElementById(@Json.Serialize(@Model.ElementId)).getContext('2d');
    const @Model.ElementId = new Chart(@Model.VariableName, {
        type: 'bar',
        data: {
            labels: @Html.Raw(@Model.Months),
            datasets: [
            {
                label: 'Income',
                data: @Model.IncomeDataset,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.IncomeColor),
                borderColor: @Html.Raw(Model.IncomeColor),
                borderWidth: 1,
                stack: '0'
            },
            {
                label: 'Expenses',
                data: @Model.ExpenseDataset,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.ExpenseColor),
                borderColor: @Html.Raw(Model.ExpenseColor),
                borderWidth: 1,
                stack: '1'
            },
            {
                label: 'Savings',
                data: @Model.SavingsDataset,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: colorize(),
                borderColor: colorize(),
                borderWidth: 1,
                stack: '2'
            },
    @if (!string.IsNullOrEmpty(Model.BudgetedIncomeDataset))
    {
        <text>
            {
                label: 'Budgeted Savings',
                data: @Model.BudgetedSavingsDataset,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: colorizeBudgetedSavings(),
                borderColor: colorizeBudgetedSavings(),
                borderWidth: 1,
                stack: '2'
            },
        </text>
    }
    @if (!string.IsNullOrEmpty(Model.BudgetedExpenseDataset))
    {
        <text>
            {
                label: 'Budgeted Expenses',
                data: @Model.BudgetedExpenseDataset,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.BudgetedExpensesColor),
                borderColor: @Html.Raw(Model.BudgetedExpensesColor),
                borderWidth: 1,
                stack: '1'
            },
        </text>
    }
    @if (!string.IsNullOrEmpty(Model.BudgetedIncomeDataset))
    {
        <text>
            {
                label: 'Budgeted Income',
                data: @Model.BudgetedIncomeDataset,
                color: 'rgba(0, 0, 0, 0)',
                backgroundColor: @Html.Raw(Model.BudgetedIncomeColor),
                borderColor: @Html.Raw(Model.BudgetedIncomeColor),
                borderWidth: 1,
                stack: '0'
            },
        </text>
    }
        ]
        },
        options: {
            responsive: true,
            interaction: {
                intersect: false,
            },
            scales: {
                x: {
                    stacked: true,
                },
                y: {
                    stacked: true
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top',
                },
                title: {
                    display: false,
                    text: '@Model.Title'
                }
            }
        }
        });
function colorize() {
        return (ctx) => {
            const v = ctx.raw;
            const c = v < 0 ? @Html.Raw(Model.InTheRedSavingsColor)
            : @Html.Raw(Model.SavingsColor);
    return c;
        }};
function colorizeBudgetedSavings() {
        return (ctx) => {
            const v = ctx.raw;
            const c = v < 0 ? @Html.Raw(Model.InTheRedSavingsColor)
            : @Html.Raw(Model.BudgetedSavingsColor);
    return c;
        }};
</script>