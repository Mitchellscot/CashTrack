@page "{Id}"
@using CashTrack.Models.IncomeSourceModels
@using System.Text.Json
@using System.Web
@using CashTrack.Pages.Shared
@model CashTrack.Pages.Sources.DetailModel
@{
    ViewData["Title"] = "- Sources";
    Layout = "_Layout";
}

<div class="container">
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.InfoMessage, MessageType = MessageType.Info, Show = Model.InfoMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.SuccessMessage, MessageType = MessageType.Success, Show = Model.SuccessMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() {MessageType = MessageType.Danger, Show = !ViewData.ModelState.IsValid })

    <div class="row mb-0 d-flex justify-content-center">
        <div class="d-flex align-content-center justify-content-center col ms-5 ps-5">
            <h3 class="fw-bold text-center">@Model.Source.Name</h3>
            <div class="text-muted align-self-center ms-2 fst-italic">@Model.Source.MostUsedCategory</div>
        </div>
        <div class="col-auto d-flex align-content-center justify-content-center mb-0 mt-2">
            <a class="link-primary text-decoration-underline" href="#" data-bs-toggle="modal" data-bs-target="#editSourceModal">
                Edit
            </a>&nbsp; | &nbsp;
            <a class="link-danger text-decoration-underline" href="#" data-bs-toggle="modal" data-bs-target="#deleteSourceModal">
                Delete
            </a>
        </div>
    </div>
    @*Delete Model*@
    <div class="modal fade" id="deleteSourceModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <h5 class="modal-title text-center">
                        <strong>Are you sure you want to Delete this Income Source?</strong>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true"></span>
                    </button>
                </div>
                <div class="modal-footer d-flex justify-content-evenly">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <form method="post">
                        <button name="SourceId" value="@Model.Source.Id" type="submit" class="btn btn-danger" asp-page-handler="Delete">DELETE</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    @*End Delete Modal*@
    @*Edit Modal*@
    <div class="modal fade" id="editSourceModal">
        @await Html.PartialAsync("AddEditIncomeSourceModal", new AddEditIncomeSourceModal() {
        Name = Model.Source.Name,
        SuggestOnLookup = Model.Source.SuggestOnLookup,
        Notes = Model.Source.Notes,
        IsEdit = true,
        ReturnUrl="~/Sources/Index"
        })
    </div>
    @*End Edit Modal*@
    <hr />
    <div class="container border shadow">
        <div class="row">
            <div class="col-12 col-lg-3 mt-3">
                <ul class="list-group text-center shadow">
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Month: &nbsp;
                        </span>
                        <span class="fw-bold">
                            @Model.Source.IncomeTotals.TotalSpentThisMonth
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Year: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @Model.Source.IncomeTotals.TotalSpentThisYear
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Total: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.Source.IncomeTotals.TotalSpentAllTime)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Min: &nbsp;
                            </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.Source.IncomeTotals.Min)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span class="d-none d-md-block">
                            Max: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.Source.IncomeTotals.Max)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Average: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.Source.IncomeTotals.Average)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Count: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @Model.Source.IncomeTotals.Count
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                        <span>
                            Category: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @Model.Source.MostUsedCategory
                        </span>
                    </li>
                </ul>
            </div>
            <div class="col-12 col-lg-4 col-xl-5 shadow mb-3 mb-lg-0">
                <form method="get">
                    <div class="input-group mx-auto m-3">
                        <span class="input-group-text">Name</span>
                        <select data-val="true" onchange="this.form.submit()" asp-for=@Model.SearchTerm asp-items="@Model.SourceSelectList" class="form-select text-center" id="addEditSourceState">
                            <option value="@Model.Source.Name" selected disabled hidden></option>
                        </select>
                    </div>
                </form>
                <div class="input-group mx-auto m-3">
                    <span class="input-group-text">City &nbsp;&nbsp;&nbsp;</span>
                    <input type="text" class="white-on-disabled form-control text-center" asp-for="@Model.Source.City" disabled />
                </div>
                <div class="input-group mx-auto m-3">
                    <span class="input-group-text">State&nbsp;</span>
                    <input type="text" class="white-on-disabled form-control text-center" asp-for="@Model.Source.State" disabled />
                </div>
                <div class="input-group mx-auto m-3">
                    @{
                        var isOnlineText = Model.Source.IsOnline ? "Online" : "Not Online";
                        var isActiveText = Model.Source.SuggestOnLookup ? "Active" : "Inactive";
                    }
                    <span class="input-group-text">Online</span>
                    <input type="text" class="white-on-disabled form-control text-center"
                           asp-for="@Model.Source.IsOnline" disabled value="@isOnlineText" />
                </div>
                <div class="input-group mx-auto m-3">
                    <span class="input-group-text">Active</span>
                    <input type="text" class="white-on-disabled form-control text-center"
                           asp-for="@Model.Source.IsOnline" disabled value="@isActiveText" />
                </div>
                <div class="form-floating mx-auto  mb-2 mb-lg-0">
                    <textarea type="text" class="form-control white-on-disabled py-0 notes-height" id="sourceDescription" asp-for="@Model.Source.Notes" disabled></textarea>
                    @if (string.IsNullOrEmpty(Model.Source.Notes))
                    {
                        <label asp-for="@Model.Source.Notes">Description</label>
                    }
                </div>
            </div>
            <div class="col-12 col-lg-5 col-xl-4 shadow px-2">
                <div class="d-flex justify-content-center">
                    <span class="mb-0 fw-bold">Recent Income</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="../Income/Index" asp-route-Query="6" asp-route-Q="@Model.Source.Name" asp-route-PageNumber="1">
                        View All
                    </a>
                </div>
                <div class="table-responsive-lg">
                    <table class="table table-sm align-middle text-center mb-2 mb-lg-0">
                        <thead class="p-0 m-0">
                            <tr>
                                <th class="p-0 m-0">
                                    Date
                                </th>
                                <th class="p-0 m-0">
                                    Amount
                                </th>
                                <th class="p-0 m-0">
                                    Category
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var income in @Model.Source.RecentIncomes)
                            {
                                <tr>
                                    <td>
                                        @income.Date
                                    </td>
                                    <td>
                                        @String.Format("{0:n}", income.Amount)
                                    </td>
                                    <td>
                                        @income.Category
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <hr />
        <div class="row g-3">
            @if (Model.Source.AnnualIncomeStatistcis.Any())
            {
                <div class="col-12 col-xl-6 d-flex">
                    <canvas id="annualIncomesChart" height="400" class="chart-height shadow align-content-center px-1"></canvas>
            </div>
            }
            @if(Model.Source.MonthlyIncomeStatistcis.Any())
            {
                <div class="col-12 col-xl-6 d-flex">
                    <canvas id="monthlyIncomesChart" height="400" class="chart-height shadow align-content-center px-1"></canvas>
                </div>
            }
            @if (Model.Source.AnnualIncomeStatistcis.Any())
            {
                <div class="col-12 col-xl-6 d-flex">
                    <canvas id="annualStatisticsChart" height="400" class="chart-height shadow align-content-center px-1"></canvas>
            </div>
            }
            @if (Model.Source.MonthlyIncomeStatistcis.Any())
            {
                <div class="col-12 col-xl-6 d-flex">
                    <canvas id="monthlyStatisticsChart" height="400" class="chart-height shadow align-content-center px-1"></canvas>
            </div>
            }
            @if (Model.Source.PaymentCategoryTotals.Count() > 1)
            {
                <div class="col-12 col-md-6 d-flex">
                    <canvas id="categoryTotalsPie" height="400" class="chart-height shadow align-content-center px-1"></canvas>
            </div>
            }
            @if (Model.Source.PaymentCategoryOcurances.Count() > 1)
            {
            <div class="col-12 col-md-6 d-flex">
                <canvas id="categoryOccurancesDonut" height="400" class="chart-height shadow align-content-center px-1"></canvas>
            </div>
            }
    </div>
</div>
</div>
@section Scripts {
<script src="~/js/sourceDetail.js" asp-append-version="true"></script>
<script asp-append-version="true" src="https://cdn.jsdelivr.net/npm/chart.js@4.1.1/dist/chart.umd.js"></script>

@await Html.PartialAsync("_ChartPartial", new _ChartPartial()
{
    ChartType = ChartType.Bar,
    UseDefaultColor = true,
    ElementId = "annualIncomesChart",
    Labels = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Year).ToArray()),
    Dataset = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Total).ToArray()),
    Title = "Annual Income Totals",
    Responsive = true
})
@await Html.PartialAsync("_ChartPartial", new _ChartPartial()
{
    ChartType = ChartType.LineMultiAxis,
    UseDefaultColor = true,
    ElementId = "annualStatisticsChart",
    Labels = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Year).ToArray()),
    Dataset = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Count).ToArray()),
    Dataset2 = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Average).ToArray()),
    Dataset3 = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Min).ToArray()),
    Dataset4 = JsonSerializer.Serialize(Model.Source.AnnualIncomeStatistcis.Select(x => x.Max).ToArray()),
    Title = "Annual Income Statistics",
    Responsive = true
})

@if(Model.Source.MonthlyIncomeStatistcis.Any()){
@await Html.PartialAsync("_ChartPartial", new _ChartPartial()
{
    ChartType = ChartType.Bar,
    UseDefaultColor = true,
    ElementId = "monthlyIncomesChart",
    Labels = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Month).ToArray()),
    Dataset = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Total).ToArray()),
    Title = "Monthly Income Totals",
    Responsive = true
})
@await Html.PartialAsync("_ChartPartial", new _ChartPartial()
{
    ChartType = ChartType.LineMultiAxis,
    UseDefaultColor = true,
    ElementId = "monthlyStatisticsChart",
    Labels = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Month).ToArray()),
    Dataset = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Count).ToArray()),
    Dataset2 = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Average).ToArray()),
    Dataset3 = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Min).ToArray()),
    Dataset4 = JsonSerializer.Serialize(Model.Source.MonthlyIncomeStatistcis.Select(x => x.Max).ToArray()),
    Title = "Income Statistics",
    Responsive = true
})
}

@await Html.PartialAsync("_ChartPartial", new _ChartPartial()
{
    ChartType = ChartType.Pie,
    UseDefaultColor = false,
    ElementId = "categoryTotalsPie",
    Labels = JsonSerializer.Serialize(Model.Source.PaymentCategoryTotals.Select(x => x.Key).ToArray()),
    Dataset = JsonSerializer.Serialize(Model.Source.PaymentCategoryTotals.Select(x => x.Value).ToArray()),
    Title = "Amount By Category",
    Responsive = true
})

@await Html.PartialAsync("_ChartPartial", new _ChartPartial()
{
    ChartType = ChartType.Donut,
    UseDefaultColor = false,
    ElementId = "categoryOccurancesDonut",
    Labels = JsonSerializer.Serialize(Model.Source.PaymentCategoryOcurances.Select(x => x.Key).ToArray()),
    Dataset = JsonSerializer.Serialize(Model.Source.PaymentCategoryOcurances.Select(x => x.Value).ToArray()),
    Title = "Category Frequency",
    Responsive = true
})
}
