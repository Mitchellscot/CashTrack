@page
@model CashTrack.Pages.Budget.AnnualModel
@using CashTrack.Models.BudgetModels
@using CashTrack.Models.SubCategoryModels;
@using CashTrack.Pages.Shared;
@using System.Text.Json;
@{
    ViewData["Title"] = "- Budgets";
    Layout = "_Layout";
    var dataIsEmptyForTheYear = Model.BudgetPageResponse.AnnualSummary.IncomeAmount == 0 && Model.BudgetPageResponse.AnnualSummary.ExpensesAmount == 0;
    var incomeButNoExpenses = Model.BudgetPageResponse.AnnualSummary.IncomeAmount > 0 && Model.BudgetPageResponse.AnnualSummary.ExpensesAmount == 0;
}

<div class="container-fluid mb-0">

    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.InfoMessage, MessageType = MessageType.Info, Show = Model.InfoMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.SuccessMessage, MessageType = MessageType.Success, Show = Model.SuccessMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() {MessageType = MessageType.Danger, Show = !ViewData.ModelState.IsValid })

    @*NAV TABS*@
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a asp-page="./Annual"
               class="nav-link active spin-it">
                Annual
            </a>
        </li>
        <li class="nav-item">
            <a asp-page="./Monthly"
               class="nav-link spin-it">
                Monthly
            </a>
        </li>
        <li class="nav-item">
            <a asp-page="./List"
               class="nav-link spin-it">
                List
            </a>
        </li>
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#"
               data-bs-toggle="dropdown" >
                Add
            </a>
            <ul class="dropdown-menu" style="margin: 0;">@*margin:0 to prevent a popper bug*@
                <li class="text-center">
                    <button class="dropdown-item text-center"
                            data-bs-toggle="modal"
                            id="addBudgetButton"
                            data-bs-target="#addBudgetModal">
                        Add Budget
                    </button>
                </li>
                <li class="text-center">
                    <button class="dropdown-item text-center"
                            id="addSubCategory"
                            data-bs-toggle="modal"
                            data-bs-target="#addSubCategoryModal">
                        Add Category
                    </button>
                </li>
            </ul>
        </li>
    </ul>
    @*END NAV TABS*@
    <div class="modal fade" id="addSubCategoryModal">
        @await Html.PartialAsync("AddEditSubCategoryModal", new AddEditSubCategoryModal()
        {
            ReturnUrl="~/Budget/Annual",
            IsEdit = false,
            MainCategoryList = Model.MainCategoryList,
            InUse=true

        });
    </div>
    <div class="modal fade" id="addBudgetModal">
        @await Html.PartialAsync("AddBudgetModal", new AddEditBudgetAllocationModal()
        {
        SubCategoryList = new SelectList(Model.CategoryList, "Id", "Category"),
        Month = DateTime.Now.Month,
        Year = DateTime.Now.Year,
        Amount = 0,
        ReturnUrl="~/Budget/Annual",
        TimeSpan = AllocationTimeSpan.Month,
        Type = BudgetType.Need
        })
    </div>
    <div class="row d-flex justify-content-between">
        <form method="get" class="mt-2 col-6 col-sm-4 col-lg-3 col-xl-2">
            <div class="input-group">
                <span class="input-group-text">Year</span>
                <select data-val="true" onchange="this.form.submit()" asp-for=@Model.Year asp-items="@Model.YearSelectList" class="form-select text-center" id="annualBudgetYearSelection">
                    <option value="@Model.Year" selected disabled hidden></option>
                </select>
            </div>
        </form>
        <div class="col-6 col-sm-8 col-lg-9 col-xl-10 mt-2 d-flex justify-content-end">
            <button class="btn btn-primary text-wrap import-link btn-height" data-bs-toggle="modal" data-bs-target="#budgetStats">View Details</button>
        </div>
    </div>
    @if (dataIsEmptyForTheYear)
        {
            <div class="d-flex justify-content-center col mt-4">
                <div class="alert alert-dismissible alert-warning col-auto text-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h3 class="mb-4"><strong>You have no annual budget to display.</strong></h3>
                    <p>
                        Get started by adding a
                        <a class="white-link spin-it" asp-page="/Budget/List" asp-fragment="addBudgetModal">Budget</a>
                </p>
                </div>
            </div>
        }
     else if (incomeButNoExpenses)
        {
            <div class="d-flex justify-content-center col mt-4">
                <div class="alert alert-dismissible alert-info col-auto text-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h3>
                        You have budgeted $@String.Format("{0:N0}", Model.BudgetPageResponse.AnnualSummary.IncomeAmount) in income
                        </h3>
                        <h4>
                            <strong>but have not added any expenses yet</strong>
                        </h4>
                    <h5>
                        To start seeing your budget data, get started by adding some
                        <a class="white-link spin-it" asp-page="/Budget/List" asp-fragment="addBudgetModal">Budgeted Expenses</a>
                </h5>
                </div>
        </div>
    }
    else
    {
    <div class="row mb-1">
        @if (Model.BudgetPageResponse.AnnualBudgetChartData != null && !dataIsEmptyForTheYear)
        {
            <div class="col d-flex">
                <canvas id="annualBudgetChart" class="budget-chart-full-width shadow align-content-center px-1"></canvas>
            </div>
        }
    </div>

    <div class="row mb-1 g-3">
        @if (Model.BudgetPageResponse.AnnualSummary != null && !dataIsEmptyForTheYear)
        {
            <div class="col col-sm-6 col-xl-3 summary-chart">
                <ul class="list-group text-center mt-3 shadow">
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span class="">
                            Income: &nbsp;
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.BudgetPageResponse.AnnualSummary.IncomeAmount)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span class="">
                            Expenses:
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.BudgetPageResponse.AnnualSummary.ExpensesAmount)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span class="">
                            Needs:
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.BudgetPageResponse.AnnualSummary.NeedsAmount)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span class="">
                            Wants:
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.BudgetPageResponse.AnnualSummary.WantsAmount)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span class="">
                            Savings:
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.BudgetPageResponse.AnnualSummary.SavingsAmount)
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span class="">
                            Unallocated:
                        </span>
                        <span class="fw-bold responsive-text">
                            @String.Format("{0:n}", Model.BudgetPageResponse.AnnualSummary.UnallocatedAmount)
                        </span>
                    </li>
                </ul>
            </div>
        }
        @if (Model.BudgetPageResponse.TypePercentages != null && !dataIsEmptyForTheYear)
        {
            <div class="col col-sm-6 col-xl-3 mt-3 d-flex">
                <canvas id="typePercentagesDonut" class="chart-height align-self-center"></canvas>
            </div>
        }
        @if (Model.BudgetPageResponse.SubCategoryPercentages != null && !dataIsEmptyForTheYear)
        {
            <div class="col col-sm-6 col-xl-3 mt-3 d-flex">
                <canvas id="subCategoryPie" class="chart-height align-self-center"></canvas>
            </div>
        }
        @if (Model.BudgetPageResponse.MainCategoryPercentages != null && !dataIsEmptyForTheYear)
        {
            <div class="col col-sm-6 col-xl-3 mt-3 d-flex">
                <canvas id="mainCategoryPie" class="chart-height align-self-center"></canvas>
            </div>
        }
    </div>
    }
</div>

@await Html.PartialAsync("BudgetBreakdownModal", new BudgetBreakdownModal()
    {
        Year = Model.Year,
        Month= 0,
        Budgets = Model.BudgetPageResponse.BudgetBreakdown
    })
@section Scripts {
    <script src="~/js/budget.js" asp-append-version="true"></script>
    <script asp-append-version="true" src="https://cdn.jsdelivr.net/npm/chart.js@4.1.1/dist/chart.umd.js"></script>
    @if(!dataIsEmptyForTheYear)
    {
    @await Html.PartialAsync("AnnualBudgetChart", new AnnualBudgetChart()
    {
        ElementId = "annualBudgetChart",
        IncomeDataset = JsonSerializer.Serialize(Model.BudgetPageResponse.AnnualBudgetChartData.IncomeData),
        NeedDataset = JsonSerializer.Serialize(Model.BudgetPageResponse.AnnualBudgetChartData.NeedsData),
        WantDataset = JsonSerializer.Serialize(Model.BudgetPageResponse.AnnualBudgetChartData.WantsData),
        SavingsDataset = JsonSerializer.Serialize(Model.BudgetPageResponse.AnnualBudgetChartData.SavingsData),
        UnallocatedDataset = JsonSerializer.Serialize(Model.BudgetPageResponse.AnnualBudgetChartData.Unallocated),
        Title = DateTime.Now.Year.ToString()
    })
    }
    @if(Model.BudgetPageResponse.TypePercentages != null && !dataIsEmptyForTheYear)
    {
    @await Html.PartialAsync("TypePercentagesDonut", new TypePercentagesDonut()
    {
        ElementId = "typePercentagesDonut",
        Labels = JsonSerializer.Serialize(Model.BudgetPageResponse.TypePercentages.Select(x => x.Key).ToArray()),
        Dataset = JsonSerializer.Serialize(Model.BudgetPageResponse.TypePercentages.Select(x => x.Value).ToArray()),
        Title = "Type Percentages"
    })
    }
    @if (Model.BudgetPageResponse.SubCategoryPercentages != null && !dataIsEmptyForTheYear)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.BudgetPageResponse.SubCategoryPercentages.Select(x => x.Key).ToArray()))
    {
        ElementId = "subCategoryPie",
        Dataset = JsonSerializer.Serialize(Model.BudgetPageResponse.SubCategoryPercentages.Select(x => x.Value).ToArray()),
        Title = "Sub Category Percentages",
        IsSummaryChart = true
    })
    }
    @if (Model.BudgetPageResponse.MainCategoryPercentages != null && !dataIsEmptyForTheYear)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.BudgetPageResponse.MainCategoryPercentages.Select(x => x.Key).ToArray()))
    {
        ElementId = "mainCategoryPie",
        Dataset = JsonSerializer.Serialize(Model.BudgetPageResponse.MainCategoryPercentages.Select(x => x.Value).ToArray()),
        Title = "Main Category Percentages",
        IsSummaryChart = true
    })
    }
}