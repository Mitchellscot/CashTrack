@page
@using System.Globalization;
@using CashTrack.Common;
@using CashTrack.Common.Extensions;
@using CashTrack.Models.ExpenseModels;
@using CashTrack.Models.ImportCsvModels;
@using CashTrack.Models.IncomeCategoryModels;
@using CashTrack.Models.IncomeModels;
@using CashTrack.Models.IncomeSourceModels;
@using CashTrack.Models.MainCategoryModels;
@using CashTrack.Models.MerchantModels;
@using CashTrack.Models.SubCategoryModels;
@using CashTrack.Pages.Budget;
@using Pages.Shared;
@using System.Text.Json;
@model CashTrack.Pages.IndexModel
@{
    ViewData["Title"] = "- Dashboard";
    Layout = "_Layout";
    var currentMonth = Model.Month == DateTime.Now.Month && Model.Year == DateTime.Now.Year;
    var realizedIncomePercentage = $"{@Model.SummaryResponse.MonthlyProgress.RealizedIncome}%";
    var budgetedExpensesPercentage = $"{@Model.SummaryResponse.MonthlyProgress.BudgetedExpenses}%";
    var budgetedSavingsPercentage = $"{@Model.SummaryResponse.MonthlyProgress.BudgetedSavings}%";
    var discretionarySpending = $"{@Model.SummaryResponse.MonthlyProgress.DiscretionarySpendingPercent}%";
    var annualSavingsPercentage = $"{@Model.SummaryResponse.AnnualSavingsProgress.AnnualSavingsPercentDone}%";
    var annualSavingsAmount = $"{@Model.SummaryResponse.AnnualSavingsProgress.AnnualSavingsAmount}";
    var monthQuery = Model.Year + "-" + Model.Month;
    var dataIsNotEmptyForTheMonth = Model.SummaryResponse.MonthlySummary.BudgetedExpenses > 0 || Model.SummaryResponse.MonthlySummary.BudgetedIncome > 0 || Model.SummaryResponse.MonthlySummary.RealizedIncome > 0 || Model.SummaryResponse.MonthlySummary.RealizedExpenses > 0;
}
<div class="container-fluid">
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.InfoMessage, MessageType = MessageType.Info, Show = Model.InfoMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.SuccessMessage, MessageType = MessageType.Success, Show = Model.SuccessMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() {MessageType = MessageType.Danger, Show = !ViewData.ModelState.IsValid })
    @if (Model.ReviewAmount > 0)
    {
        <div class="alert alert-info spin-it text-center">You have @Model.ReviewAmount transactions to review. <a asp-page="./Import/Expenses">Review them here</a></div>
    }
    @if (User.Identity.Name.IsEqualTo("cash"))
    {
        <div class="row d-flex justify-content-center">
            <div class="alert alert-danger spin-it text-center col-auto">
                You are using the default sign in credentials. Please <a asp-page="/Settings/Index">change your user name and password</a>
            </div>
        </div>
    }

    <div class="row mt-2 border-bottom d-flex justify-content-lg-between flex-column flex-md-row flex-lg-nowrap">
        <div class="d-flex col-auto align-self-center">
            <h3 class="me-2">
                @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Model.Month) @Model.Year
            </h3>
            @if (Model.SummaryResponse.LastImport != DateTime.MinValue)
            {
                <p class="fst-italic align-self-end ms-3">Last Import: @Model.SummaryResponse.LastImport.ToShortDateString()</p>
            }
        </div>
        <div class="d-flex flex-column flex-sm-row justify-content-sm-between justify-content-lg-start col-lg-auto">
            <form method="get" class="d-flex btn-height">
                <div class="input-group me-2">
                    <select onchange="this.form.submit()" style="min-width: 135px;" data-val="true" asp-for=@Model.Month asp-items="@Model.MonthList" class="form-select text-center" id="monthlyBudgetMonthSelection">
                        <option value="@Model.Month" selected disabled hidden></option>
                    </select>
                    <select onchange="this.form.submit()" data-val="true" asp-for=@Model.Year asp-items="@Model.YearSelectList" class="form-select text-center" id="monthlyBudgetYearSelection">
                        <option value="@Model.Year" selected disabled hidden></option>
                    </select>
                </div>
            </form>
            <div class="d-flex justify-content-sm-end flex-column flex-sm-row mb-2 col-lg-auto dropdown-center">
                <button class="btn btn-secondary btn-height my-2 my-sm-0 me-sm-2 btn-text-overflow" type="button" data-bs-toggle="modal" data-bs-target="#expenseStats">View Details</button>

                <button class="btn btn-primary dropdown-toggle btn-height" type="button" data-bs-toggle="dropdown">Add</button>

                <ul class="dropdown-menu">
                    <li>
                        <button class="dropdown-item text-center"
                                id="addExpenseButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addExpenseModal">
                            Expense
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item text-center"
                                id="addIncomeButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addIncomeModal">
                            Income
                        </button>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addMerchantButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addMerchantModal">
                            Merchant
                        </button>
                    </li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addMerchantButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addSourceModal">
                            Income Source
                        </button>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addIncomeCategoryButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addIncomeCategoryModal">
                            Income Category
                        </button>
                    </li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addSubCategoryButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addSubCategoryModal">
                            Expense Category
                        </button>
                    </li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addMainCategoryButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addMainCategoryModal">
                            Main Category
                        </button>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li>
                        <button class="dropdown-item text-center"
                                id="importCsvButton"
                                data-bs-toggle="modal"
                                data-bs-target="#importCsvModal">
                            Import Transactions
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row mb-3 flex-wrap">
        @if (!dataIsNotEmptyForTheMonth)
        {
            <div class="d-flex justify-content-center col mt-4">
                <div class="alert alert-dismissible alert-warning col-auto text-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h3 class="mb-4"><strong>You have no data available to display.</strong></h3>
                    <p>
                        Get started by
                        <button class="white-text-button" data-bs-toggle="modal" data-bs-target="#importCsvModal">Importing Data</button>,
                        adding
                        <button class="white-text-button" data-bs-toggle="modal" data-bs-target="#addExpenseModal">Expenses</button>,
                        <button class="white-text-button" data-bs-toggle="modal" data-bs-target="#addIncomeModal">Income</button>, or a
                        <a class="white-link spin-it" asp-page="/Budget/List" asp-fragment="addBudgetModal">Budget</a>
                    </p>
                </div>
            </div>
        }
        @if (dataIsNotEmptyForTheMonth)
        {
            <div class="col col-sm-6 col-xl-3 mt-1 d-flex flex-column align-content-center summary-chart mb-3">
                <ul class="list-group text-center mt-2 shadow flex-fill d-flex justify-content-between">
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                        <span>
                            Income: &nbsp;
                        </span>
                        <span class="fw-bold text-primary responsive-text">
                            @String.Format("{0:n}", Model.SummaryResponse.MonthlySummary.RealizedIncome)
                            @if (Model.SummaryResponse.MonthlySummary.BudgetedIncome != 0)
                            {
                                <span class="responsive-text">
                                    / @Model.SummaryResponse.MonthlySummary.BudgetedIncome
                                </span>
                            }
                        </span>
                    </li>
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                        <span>
                            Expenses:
                        </span>
                        <span class="fw-bold text-primary responsive-text">
                            @String.Format("{0:n}", Model.SummaryResponse.MonthlySummary.RealizedExpenses)
                            @if (Model.SummaryResponse.MonthlySummary.BudgetedExpenses != 0)
                            {
                                <span class="responsive-text">
                                    / @Model.SummaryResponse.MonthlySummary.BudgetedExpenses
                                </span>
                            }
                        </span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between p-3">
                        <span>
                            Savings Goal:
                        </span>
                        <span class="fw-bold text-primary responsive-text">
                            @Decimal.Round(Model.SummaryResponse.MonthlySummary.RealizedSavings, 0)
                            @if (Model.SummaryResponse.MonthlySummary.BudgetedSavings != 0)
                            {
                                <span class="responsive-text">
                                    / @Model.SummaryResponse.MonthlySummary.BudgetedSavings
                                </span>
                            }
                        </span>
                    </li>
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                        @if (currentMonth)
                        {
                            <span>
                                Estimated Savings:
                            </span>
                        }
                        else
                        {
                            <span>
                                Actual Savings:
                            </span>
                        }
                        @if (Model.SummaryResponse.MonthlySummary.EstimatedSavings < 0)
                        {
                            <span class="fw-bold responsive-text text-danger">
                                @String.Format("{0:n}", Model.SummaryResponse.MonthlySummary.EstimatedSavings)
                            </span>
                        }
                        else
                        {
                            <span class="fw-bold text-primary responsive-text">
                                @String.Format("{0:n}", Model.SummaryResponse.MonthlySummary.EstimatedSavings)
                            </span>
                        }

                    </li>
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                        <span>
                            Unspent:
                        </span>
                        <span class="fw-bold text-primary responsive-text">
                            @String.Format("{0:n}", Model.SummaryResponse.MonthlySummary.Unspent)
                        </span>
                    </li>
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                        <span>
                            Budget Variance:
                        </span>
                        <span class="fw-bold text-primary responsive-text">
                            @Model.SummaryResponse.MonthlySummary.BudgetVariance.ToString("P", CultureInfo.InvariantCulture)
                        </span>
                    </li>
                </ul>
            </div>

            <div class="col col-sm-6 col-xl-3 pt-2 overall-summary-chart mb-3">
                <canvas id="overallSummaryChart" class="shadow"></canvas>
            </div>
        }

        @if (dataIsNotEmptyForTheMonth && Model.SummaryResponse.MonthlyProgress.RealizedIncome > 0)
        {
            <div class="col col-xl-6 flex-fill rounded-2 mt-2 shadow monthly-progress-chart mb-3">
                <div class="d-flex">
                    <h4 class="mt-1 me-2">Budgeted Income</h4>
                    <button class="icon-button" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="This bar represents realized income versus budgeted income.">
                        @await Html.PartialAsync("Icons", new Icons()
                        {
                            Icon = Icon.QuestionCircle,
                            Color = IconColors.Primary,
                            Height=22,
                            Width=22,
                            Classes="align-self-center"
                        })
                    </button>
                </div>
                <div class="progress border-bottom my-2">
                    <div class="progress-bar bg-success" style="width: @realizedIncomePercentage">@realizedIncomePercentage</div>
                </div>
                <div class="d-flex">
                    <h4 class="me-2">Budgeted Expenses</h4>
                    <button class="icon-button" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="This bar represents realized expenses versus budgeted expenses.">
                        @await Html.PartialAsync("Icons", new Icons()
                    {
                    Icon = Icon.QuestionCircle,
                    Color = IconColors.Primary,
                    Height=22,
                    Width=22,
                    Classes="align-self-center"
                    })
                    </button>
                </div>
                <div class="progress my-2">
                    <div class="progress-bar bg-danger" style="width: @budgetedExpensesPercentage">@budgetedExpensesPercentage</div>
                </div>
                <div class="d-flex">
                    <h4 class="me-2">Budgeted Savings</h4>
                    <button class="icon-button" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="This bar represents money you have budgeted for savings. Since this is a top priority, this bar fills up first and starts to decrease after budgeted expenses and discretionary expenses have decreased.">
                        @await Html.PartialAsync("Icons", new Icons()
                    {
                    Icon = Icon.QuestionCircle,
                    Color = IconColors.Primary,
                    Height=22,
                    Width=22,
                    Classes="align-self-center"
                    })
                    </button>
                </div>
                <div class="progress my-2">
                    <div class="progress-bar bg-info" style="width: @budgetedSavingsPercentage">@budgetedSavingsPercentage</div>
                </div>
                <div class="d-flex">
                    <h4 class="me-2">Discretionary Spending</h4>
                    <button class="icon-button" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="This bar represents money you can spend at your discretion after you have met the budgeted expenses amount and before you start decreasing your budgeted savings amount. If  there is still money set aside after the month is done, it will be added towards your savings (see Estimated Savings).">
                        @await Html.PartialAsync("Icons", new Icons()
                    {
                    Icon = Icon.QuestionCircle,
                    Color = IconColors.Primary,
                    Height=22,
                    Width=22,
                    Classes="align-self-center"
                    })
                    </button>
                </div>
                <div class="progress my-2">
                    <div class="progress-bar bg-warning" style="width: @discretionarySpending">@Model.SummaryResponse.MonthlyProgress.DiscretionarySpendingAmount</div>
                </div>
                <div class="d-flex">
                    <h4 class="me-2">Annual Savings Goal</h4>
                    <button class="icon-button" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="This bar represents the amount of money you have saved towards your annual savings goal, which is the budgeted amount for each month. This only includes money from the previous months of this year  and not the current month.">
                        @await Html.PartialAsync("Icons", new Icons()
                    {
                    Icon = Icon.QuestionCircle,
                    Color = IconColors.Primary,
                    Height=22,
                    Width=22,
                    Classes="align-self-center"
                    })
                    </button>
                </div>
                <div class="progress my-2">
                    <div class="progress-bar" style="width: @annualSavingsPercentage">@annualSavingsAmount</div>
                </div>
                <p class="text-muted text-center">@Model.SummaryResponse.AnnualSavingsProgress.AnnualSavingsMessage</p>
            </div>
        }
        else if (Model.SummaryResponse.MonthlySummary.BudgetedIncome == 0 && Model.SummaryResponse.MonthlySummary.RealizedExpenses > 0)
        {
            <div class="d-flex flex-column col mt-4 justify-content-center">
                <div class="alert alert-dismissible alert-info col-auto text-center align-self-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h4 class="mb-2">
                        Add <a class="white-link spin-it" asp-page="/Budget/List" asp-fragment="addBudgetModal"><strong>Budgeted Income</strong></a> to start seeing Savings Data

                    </h4>
                </div>
            </div>
        }
        else if (Model.SummaryResponse.MonthlySummary.BudgetedIncome > 0 && Model.SummaryResponse.MonthlySummary.RealizedExpenses == 0)
        {
            <div class="d-flex flex-column col mt-4 justify-content-center">
                <div class="alert alert-dismissible alert-info col-auto text-center align-self-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h4 class="mb-2">
                        Add some <a class="white-link spin-it" asp-page="/Expenses/Index" asp-fragment="addExpenseModal"><strong>Expenses</strong></a> to start seeing Savings Data
                    </h4>
                </div>
            </div>
        }
        else if (Model.SummaryResponse.MonthlySummary.BudgetedIncome > 0 && Model.SummaryResponse.MonthlySummary.RealizedIncome == 0)
        {
            <div class="d-flex flex-column col mt-4 justify-content-center">
                <div class="alert alert-dismissible alert-info col-auto text-center align-self-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h4 class="mb-2">
                        Add some <a class="white-link spin-it" asp-page="/Income/Index" asp-fragment="addIncomeModal"><strong>Income</strong></a> to start seeing Savings Data
                    </h4>
                </div>
            </div>
        }
    </div>
    <div class="row mb-3 flex-wrap">
        @if (Model.SummaryResponse.DailyExpenseLineChart != null && Model.SummaryResponse.DailyExpenseLineChart.ExpenseMax != 0)
        {
            <div class="col col-xxl-6 mb-3 d-flex chart-width-full-xxl-half flex-fill">
                <canvas id="dailyExpenseChart" class="shadow align-self-center"></canvas>
            </div>
        }
        @if (Model.SummaryResponse.DailyExpenseChart.Any())
        {
            <div class="col col-xxl-6 d-flex mb-3 chart-width-full-xxl-half flex-fill">
                <canvas id="dailyExpenseBarChart" class="shadow align-self-center"></canvas>
            </div>
        }
    </div>
    @if (dataIsNotEmptyForTheMonth && Model.SummaryResponse.MonthlySummary.RealizedExpenses > 0)
    {
        <div class="row d-flex mb-3 chart-full-width flex-fill">
            <canvas id="monthlySummaryChart" class="shadow align-self-center"></canvas>
        </div>
    }
    <div class="row mb-3 flex-wrap">
        @if (Model.SummaryResponse.TopExpenses.Count > 1)
        {
            <div class="col col-md-6 mb-3 col-xxl-3 px-3 shadow flex-fill">
                <div class="d-flex justify-content-center">
                    <span class="mb-0 fw-bold">Top Expenses</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Expenses/Index" asp-route-Query="4" asp-route-Q="@Model.Year" asp-route-PageNumber="1">
                        View All
                    </a>
                </div>
                <div class="table-responsive-lg">
                    <table class="table table-sm align-middle text-center mb-3">
                        <thead class="p-0 m-0">
                            <tr>
                                <th class="p-0 m-0">
                                    Date
                                </th>
                                <th class="p-0 m-0">
                                    Amount
                                </th>
                                <th class="p-0 m-0">
                                    Category
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expense in @Model.SummaryResponse.TopExpenses)
                            {
                                <tr>
                                    <td>
                                        @expense.Date
                                    </td>
                                    <td>
                                        @String.Format("{0:n}", expense.Amount)
                                    </td>
                                    <td>
                                        @expense.SubCategory
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.SubCategoryPercentages.Values.Sum() > 0)
            {
                <div class="col col-md-6 col-xxl-3 d-flex mb-3 pie-stats justify-content-center">
                    <canvas id="subCategoryPie" class="chart-height align-self-center"></canvas>
                </div>
            }
        }

        @if (Model.SummaryResponse.TopMerchants.Any())
        {
            <div class="col col-md-6 mb-3 col-xxl-3 px-3 shadow flex-fill">
                <div class="d-flex justify-content-center">
                    <span class="mb-0 fw-bold">Top Merchants</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Merchants/Index" asp-route-Query="3" asp-route-Q2=true asp-route-PageNumber="1">
                        View All
                    </a>
                </div>
                <div class="table-responsive-lg">
                    <table class="table table-sm align-middle text-center mb-3">
                        <thead class="p-0 m-0">
                            <tr>
                                <th class="p-0 m-0">
                                    Merchant
                                </th>
                                <th class="p-0 m-0">
                                    Amount
                                </th>
                                <th class="p-0 m-0">
                                    Count
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expense in @Model.SummaryResponse.TopMerchants)
                            {
                                <tr>
                                    <td>
                                        @expense.Name
                                    </td>
                                    <td>
                                        @String.Format("{0:n}", expense.Amount)
                                    </td>
                                    <td>
                                        @expense.Count
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        @if (Model.SummaryResponse.MerchantPercentages != null && Model.SummaryResponse.MerchantPercentages.Values.Sum() > 0)
        {
            <div class="col col-md-6 col-xxl-3 d-flex mb-3 pie-stats justify-content-center">
                <canvas id="merchantPie" class="chart-height align-self-center"></canvas>
            </div>
        }

        @if (Model.SummaryResponse.TopCategories.Count > 1)
        {
            <div class="col col-md-6 mb-3 col-xxl-3 px-3 shadow flex-fill">
                <div class="d-flex justify-content-center">
                    <span class="mb-0 fw-bold">Top Categories</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Expenses/Categories/Index" asp-route-Query="3" asp-route-Q2=true asp-route-PageNumber="1">
                        View All
                    </a>
                </div>
                <div class="table-responsive-lg">
                    <table class="table table-sm align-middle text-center mb-3">
                        <thead class="p-0 m-0">
                            <tr>
                                <th class="p-0 m-0">
                                    Category
                                </th>
                                <th class="p-0 m-0">
                                    Amount
                                </th>
                                <th class="p-0 m-0">
                                    Count
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expense in @Model.SummaryResponse.TopCategories)
                            {
                                <tr>
                                    <td>
                                        @expense.Name
                                    </td>
                                    <td>
                                        @String.Format("{0:n}", expense.Amount)
                                    </td>
                                    <td>
                                        @expense.Count
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            @if (Model.SummaryResponse.MainCategoryPercentages != null && Model.SummaryResponse.MainCategoryPercentages.Values.Sum() > 0)
            {
                <div class="col col-md-6 col-xxl-3 d-flex mb-3 pie-stats">
                    <canvas id="mainCategoryPie" class="chart-height align-self-center justify-content-center"></canvas>
                </div>
            }
        }
        @if (Model.SummaryResponse.YearToDate != null && Model.SummaryResponse.TopExpenses.Count > 1)
        {
            <div class="col col-xxl-6 d-flex flex-fill chart-width-full-xxl-half">
                <canvas id="ytdChart" class="shadow align-self-center"></canvas>
            </div>
        }
    </div>
</div>
@* Add Expense Modal *@
<div class="modal fade" id="addExpenseModal">
    @await Html.PartialAsync("AddEditExpenseModal",
    new AddEditExpenseModal() {
    IsEdit = false,
    ReturnUrl = "/index",
    SubCategoryList = new SelectList(Model.SubCategoryList, "Id", "Category"),
    Date= DateTime.Today,
    MainCategoryList = new SelectList(Model.MainCategoryList, "Id", "Category"),
    PageNumber = 1,
    Query = 0,
    Q = "",
    Q2 = "",
    ShowAddCategoryButton = false
    });
</div>
@*End Add Expense Modal*@
@* Add Income Modal *@
<div class="modal fade" id="addIncomeModal">
    @await Html.PartialAsync("AddEditIncomeModal", new AddEditIncomeModal(){
    ReturnUrl = "/index",
    IsEdit = false,
    CategoryList = new SelectList(Model.IncomeCategoryList, "Id", "Category"),
    Date= DateTime.Today,
    ShowAddCategoryButton = false,
    PageNumber = 1,
    Query = 0,
    Q = "",
    });
</div>
@*End Add Income Modal*@
@*Add Merchant Modal*@
<div class="modal fade" id="addMerchantModal">
    @await Html.PartialAsync("AddEditMerchantModal", new AddEditMerchantModal() {
    ReturnUrl = "/index",
    SuggestOnLookup = true,
    IsEdit = false
    })
</div>
@*EndAdd Merchant Modal*@
@*Add Income Source Modal*@
<div class="modal fade" id="addSourceModal">
    @await Html.PartialAsync("AddEditIncomeSourceModal", new AddEditIncomeSourceModal()
    {
    ReturnUrl = "/index",
    IsEdit = false,
    SuggestOnLookup = true
    })
</div>
@*End Add Income Source Modal*@
@*Add Sub Category Modal*@
<div class="modal fade" id="addSubCategoryModal">
    @await Html.PartialAsync("AddEditSubCategoryModal", new AddEditSubCategoryModal()
    { ReturnUrl="~/index",
    InUse=true,
    IsEdit=false,
    MainCategoryList=new SelectList(Model.MainCategoryList, "Id", "Category"),

    })
</div>
@*End Sub Category Modal*@
@*Add Main Category Modal*@
<div class="modal fade" id="addMainCategoryModal">
    @await Html.PartialAsync("AddEditMainCategoryModal", new AddEditMainCategoryModal() {
    ReturnUrl = "/index",
    IsEdit = false});
</div>
@*EndAdd Main Category Modal*@
@*Add Income Category Modal*@
<div class="modal fade" id="addIncomeCategoryModal">
    @await Html.PartialAsync("AddEditIncomeCategoryModal",
    new AddEditIncomeCategoryModal() {
    ReturnUrl = "/index",
    InUse = true,
    IsEdit = false,
    })
</div>
@*End Add Income Category Modal*@
@*Import Transactions Modal*@
<div class="modal fade" id="importCsvModal">
    @await Html.PartialAsync("ImportTransactionsModal", new ImportModel() { ReturnUrl = "/Import/Expenses" })
</div>
@*End Import Transactions Modal*@
@await Html.PartialAsync("TransactionBreakdownModal", new TransactionBreakdownModal()
{
    Year = Model.Year,
    Month= Model.Month,
    Transactions = Model.SummaryResponse.TransactionBreakdown
})
@section Scripts {
    <script src="~/js/monthly.js"></script>
    <script asp-append-version="true" src="https://cdn.jsdelivr.net/npm/chart.js@4.1.1/dist/chart.umd.js"></script>

    @await Html.PartialAsync("MonthlyExpenseSummaryChart", new MonthlyExpenseSummaryChart()
    {
        ElementId = "monthlySummaryChart",
        Labels = JsonSerializer.Serialize(Model.SummaryResponse.ExpenseSummaryChart.Labels),
        BudgetedExpenseDatasets = Model.SummaryResponse.ExpenseSummaryChart.BudgetedExpenses,
        RealizedExpenseDatasets = Model.SummaryResponse.ExpenseSummaryChart.RealizedExpenses,
        Title = $"Budgeted Expenses vs Realized Expenses"
    })
    @await Html.PartialAsync("OverallSummaryChart", new OverallSummaryChart()
    {
        ElementId = "overallSummaryChart",
        Title = @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Model.Month),
        Labels = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.Labels),
        BudgetedIncome = Model.SummaryResponse.OverallSummaryChart.BudgetedIncome,
        RealizedIncome = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedIncome),
        BudgetedExpenses = Model.SummaryResponse.OverallSummaryChart.BudgetedExpenses,
        RealizedExpenses = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedExpenses),
        BudgetedSavings = Model.SummaryResponse.OverallSummaryChart.BudgetedSavings,
        RealizedSavings = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedSavings)
    })
    @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.SubCategoryPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.SubCategoryPercentages.Select(x => x.Key).ToArray()))
    {
        ElementId = "subCategoryPie",
        Dataset = JsonSerializer.Serialize(Model.SummaryResponse.SubCategoryPercentages.Select(x => x.Value).ToArray()),
        Title = "Sub Category Percentages",
        IsSummaryChart = true
    })
    }
    @if (Model.SummaryResponse.MainCategoryPercentages != null && Model.SummaryResponse.MainCategoryPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.MainCategoryPercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "mainCategoryPie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MainCategoryPercentages.Select(x => x.Value).ToArray()),
            Title = "Main Category Percentages",
            IsSummaryChart = true
        })
    }
    @if (Model.SummaryResponse.MainCategoryPercentages != null && Model.SummaryResponse.MainCategoryPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("DailyExpenseLineChart", new DailyExpenseLineChart()
            {
                ElementId = "dailyExpenseChart",
                Dataset = JsonSerializer.Serialize(Model.SummaryResponse.DailyExpenseLineChart.Dataset),
                Title = "Monthly Total By Budgeted Amounts",
                Labels = JsonSerializer.Serialize(Model.SummaryResponse.DailyExpenseLineChart.Labels),
                Max = Model.SummaryResponse.DailyExpenseLineChart.Max,
                ExpenseBudgetMax = Model.SummaryResponse.DailyExpenseLineChart.ExpenseBudgetMax,
                DiscretionarySpendingMax = Model.SummaryResponse.DailyExpenseLineChart.DiscretionarySpendingMax,
                IncomeMax = Model.SummaryResponse.DailyExpenseLineChart.IncomeMax
            })
    }
    @if (Model.SummaryResponse.YearToDate != null && Model.SummaryResponse.TopExpenses.Count > 1)
    {
        @await Html.PartialAsync("MonthlyYearToDateChart", new MonthlyYearToDateChart()
        {
            ElementId = "ytdChart",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.DailyExpenseLineChart.Dataset),
            Title = "Year To Date",
            Labels = JsonSerializer.Serialize(Model.SummaryResponse.YearToDate.Labels),
            IncomeDataset = JsonSerializer.Serialize(Model.SummaryResponse.YearToDate.IncomeDataset),
            ExpenseDataset = JsonSerializer.Serialize(Model.SummaryResponse.YearToDate.ExpenseDataset),
            SavingsDataset = JsonSerializer.Serialize(Model.SummaryResponse.YearToDate.SavingsDataset)
        })
    }
    @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.MerchantPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.MerchantPercentages.Select(x => x.Key).ToArray()))
    {
        ElementId = "merchantPie",
        Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MerchantPercentages.Select(x => x.Value).ToArray()),
        Title = "Merchant Percentages",
        IsSummaryChart = true
    })
    }
    @if (Model.SummaryResponse.DailyExpenseChart.Any())
    {
        @await Html.PartialAsync("DailyExpenseBarChart", new DailyExpenseBarChart()
    {
        ElementId = "dailyExpenseBarChart",
        ExpenseDatasets = Model.SummaryResponse.DailyExpenseChart,
        Title = "Expenses By Day and Category",
        Labels = JsonSerializer.Serialize(Enumerable.Range(1, DateTime.DaysInMonth(Model.Year, Model.Month)).ToArray())
    })
    }

}