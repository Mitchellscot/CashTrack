@page
@using CashTrack.Pages.Budget;
@using CashTrack.Pages.Shared;
@using System.Globalization;
@using System.Text.Json;
@model CashTrack.Pages.Annual
@{
}
<div class="container-fluid">
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.InfoMessage, MessageType = MessageType.Info, Show = Model.InfoMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.SuccessMessage, MessageType = MessageType.Success, Show = Model.SuccessMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() {MessageType = MessageType.Danger, Show = !ViewData.ModelState.IsValid })
    <div class="row mt-2 border-bottom d-flex justify-content-between">
        <div class="d-flex col-auto align-self-center">
        <h3 class="me-2">
            @Model.Year
        </h3>
        @if (Model.SummaryResponse.LastImport != DateTime.MinValue)
        {
            <p class="fst-italic align-self-end ms-3">Last Import: @Model.SummaryResponse.LastImport.ToShortDateString()</p>
        }
        </div>
        <div class="col-auto d-flex">
            <form method="get" class="d-flex btn-height">
                <div class="input-group me-2">
                    <select onchange="this.form.submit()" data-val="true" asp-for=@Model.Year asp-items="@Model.YearSelectList" class="form-select text-center" id="monthlyBudgetYearSelection">
                        <option value="@Model.Year" selected disabled hidden></option>
                    </select>
                </div>
            </form>
            <div class="d-flex justify-content-end">
                <button class="btn btn-secondary btn-height me-2 btn-text-overflow" type="button" data-bs-toggle="modal" data-bs-target="#expenseStats">View Details</button>
                <div class="dropdown-center">
                    <a class="btn btn-secondary dropdown-toggle me-2 btn-text-overflow btn-height" href="#" role="button" data-bs-toggle="dropdown">Time Span</a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item text-center" asp-page="./Index">Monthly</a></li>
                        <li><a class="dropdown-item text-center" asp-page="./Annual">Annual</a></li>
                        <li><a class="dropdown-item text-center" asp-page="./Summary">All Time</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="row d-flex">
        @if (Model.SummaryResponse.OverallSummaryChart != null)
        {
            <div class="col-6 col-lg-3 chart-height shadow-sm">
                <canvas id="overallSummaryChart"></canvas>
            </div>
        }
        @if (Model.SummaryResponse.TopExpenses.Count > 1)
        {
            <div class="col-6 col-lg-3 mt-3">
                <div class="d-flex justify-content-center">
                    <span class="mb-0 fw-bold d-none d-lg-block">Top Expenses</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Expenses/Index" asp-route-Query="4" asp-route-Q="@Model.Year" asp-route-PageNumber="1">
                        View All
                    </a>
                </div>
                <div class="table-responsive-lg">
                    <table class="table table-sm align-middle text-center mb-0">
                        <thead class="p-0 m-0">
                            <tr>
                                <th class="p-0 m-0">
                                    Date
                                </th>
                                <th class="p-0 m-0">
                                    Amount
                                </th>
                                <th class="p-0 m-0">
                                    Category
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expense in @Model.SummaryResponse.TopExpenses)
                            {
                                <tr>
                                    <td>
                                        @expense.Date
                                    </td>
                                    <td>
                                        @String.Format("{0:n}", expense.Amount)
                                    </td>
                                    <td>
                                        @expense.SubCategory
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
    <div class="row">
        @if (Model.SummaryResponse.SavingsChart != null && Model.SummaryResponse.TopExpenses.Count > 1)
        {
            <div class="col-12 col-lg-6 mt-3">
                <canvas id="savingsChart" class="chart-height"></canvas>
            </div>
        }
        @if (Model.SummaryResponse.IncomeExpenseChart != null && Model.SummaryResponse.TopExpenses.Count > 1)
        {
            <div class="col-12 col-lg-6 mt-3">
                <canvas id="incomeExpenseChart" class="chart-height"></canvas>
            </div>
        }
    </div>
    <div class="row">
        @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.SubCategoryPercentages.Values.Sum() > 0)
        {
            <div class="col-6 col-lg-3 mt-3">
                <canvas id="subCategoryPie" class="chart-height"></canvas>
            </div>
        }
        @if (Model.SummaryResponse.MainCategoryPercentages != null && Model.SummaryResponse.MainCategoryPercentages.Values.Sum() > 0)
        {
            <div class="col-6 col-lg-3 mt-3">
                <canvas id="mainCategoryPie" class="chart-height"></canvas>
            </div>
        }
        @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.MerchantPercentages.Values.Sum() > 0)
        {
            <div class="col-6 col-lg-3 mt-3">
                <canvas id="merchantPie" class="chart-height"></canvas>
            </div>
        }
        @if (Model.SummaryResponse.IncomeSourcePercentages != null && Model.SummaryResponse.IncomeSourcePercentages.Values.Sum() > 0)
        {
            <div class="col-6 col-lg-3 mt-3">
                <canvas id="incomeSourcePie" class="chart-height"></canvas>
            </div>
        }
    </div>

</div>

@section Scripts {
    <script src="~/js/annual.js"></script>
    <script asp-append-version="true" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @await Html.PartialAsync("OverallSummaryChart", new OverallSummaryChart()
    {
        ElementId = "overallSummaryChart",
        Title = Model.Year.ToString(),
        Labels = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.Labels),
        BudgetedIncome = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.BudgetedIncome),
        RealizedIncome = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedIncome),
        BudgetedExpenses = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.BudgetedExpenses),
        RealizedExpenses = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedExpenses),
        BudgetedSavings = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.BudgetedSavings),
        RealizedSavings = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedSavings)
    })
    @if (Model.SummaryResponse.SavingsChart != null && Model.SummaryResponse.TopExpenses.Count > 1)
    {
        @await Html.PartialAsync("AnnualSavingsChart", new AnnualSavingsChart()
        {
            ElementId = "savingsChart",
            Dataset = Model.SummaryResponse.SavingsChart.SavingsDataset,
            SuggestedSavingsDataset = Model.SummaryResponse.SavingsChart.SuggestedSavingsDataset,
            MonthBudgetDataBegins = Model.SummaryResponse.SavingsChart.MonthBudgetDataBegins,
            Title = "Annual Savings",
            Labels = Model.SummaryResponse.SavingsChart.Labels,
        })
    }
    @if (Model.SummaryResponse.SavingsChart != null && Model.SummaryResponse.TopExpenses.Count > 1)
    {
        @await Html.PartialAsync("AnnualIncomeExpenseChart", new AnnualIncomeExpenseChart()
        {
            ElementId = "incomeExpenseChart",
            IncomeDataset = Model.SummaryResponse.IncomeExpenseChart.IncomeDataset,
            MonthBudgetIncomeDataBegins = Model.SummaryResponse.IncomeExpenseChart.MonthBudgetIncomeDataBegins,
            ExpenseDataset = Model.SummaryResponse.IncomeExpenseChart.ExpensesDataset,
            MonthBudgetExpenseDataBegins = Model.SummaryResponse.IncomeExpenseChart.MonthBudgetExpenseDataBegins,
            Title = "Income And Expenses",
            Labels = Model.SummaryResponse.IncomeExpenseChart.Labels,
        })
    }
    @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.SubCategoryPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.SubCategoryPercentages.Select(x => x.Key).ToArray()))
    {
        ElementId = "subCategoryPie",
        Dataset = JsonSerializer.Serialize(Model.SummaryResponse.SubCategoryPercentages.Select(x => x.Value).ToArray()),
        Title = "Sub Category Percentages",
        IsSummaryChart = true
    })
    }
    @if (Model.SummaryResponse.MainCategoryPercentages != null && Model.SummaryResponse.MainCategoryPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.MainCategoryPercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "mainCategoryPie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MainCategoryPercentages.Select(x => x.Value).ToArray()),
            Title = "Main Category Percentages",
            IsSummaryChart = true
        })
    }
    @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.MerchantPercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.MerchantPercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "merchantPie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MerchantPercentages.Select(x => x.Value).ToArray()),
            Title = "Merchant Percentages",
            IsSummaryChart = true
        })
    }
    @if (Model.SummaryResponse.IncomeSourcePercentages != null && Model.SummaryResponse.IncomeSourcePercentages.Values.Sum() > 0)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.IncomeSourcePercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "incomeSourcePie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.IncomeSourcePercentages.Select(x => x.Value).ToArray()),
            Title = "Income Source Percentages",
            IsSummaryChart = true
        })
    }
}