@page
@using CashTrack.Models.ExpenseModels;
@using CashTrack.Models.ImportCsvModels;
@using CashTrack.Models.IncomeCategoryModels;
@using CashTrack.Models.IncomeModels;
@using CashTrack.Models.IncomeSourceModels;
@using CashTrack.Models.MainCategoryModels;
@using CashTrack.Models.MerchantModels;
@using CashTrack.Models.SubCategoryModels;
@using CashTrack.Pages.Budget;
@using CashTrack.Pages.Shared;
@using System.Globalization;
@using System.Text.Json;
@model CashTrack.Pages.Annual
@{
    ViewData["Title"] = "- Dashboard";
    Layout = "_Layout";
    var incomeDataIsPresent = Model.SummaryResponse.AnnualSummary.Earned > 0;
    var expenseDataIsPresent = Model.SummaryResponse.AnnualSummary.Spent > 0;
    var incomeANDExpenseDataIsPresent = incomeDataIsPresent && expenseDataIsPresent;
    var incomeORExpenseDataIsPresent = incomeDataIsPresent || expenseDataIsPresent;
}
<div class="container-fluid">
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.InfoMessage, MessageType = MessageType.Info, Show = Model.InfoMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() { Message = Model.SuccessMessage, MessageType = MessageType.Success, Show = Model.SuccessMessage != null })
    @await Html.PartialAsync("_MessagePartial",
    new _MessagePartial() {MessageType = MessageType.Danger, Show = !ViewData.ModelState.IsValid })
    <div class="row mt-2 border-bottom d-flex justify-content-between">
        <div class="d-flex col-auto align-self-center">
        <h3 class="me-2">
            @Model.Year
        </h3>
        @if (Model.SummaryResponse.LastImport != DateTime.MinValue)
        {
            <p class="fst-italic align-self-end ms-3">Last Import: @Model.SummaryResponse.LastImport.ToShortDateString()</p>
        }
        </div>
        <div class="col-auto d-flex">
            <form method="get" class="d-flex btn-height">
                <div class="input-group me-2">
                    <select onchange="this.form.submit()" data-val="true" asp-for=@Model.Year asp-items="@Model.YearSelectList" class="form-select text-center" id="monthlyBudgetYearSelection">
                        <option value="@Model.Year" selected disabled hidden></option>
                    </select>
                </div>
            </form>
            <div class="d-flex justify-content-end">
                <button class="btn btn-secondary btn-height me-2 btn-text-overflow" type="button" data-bs-toggle="modal" data-bs-target="#expenseStats">View Details</button>
                <div class="dropdown-center">
                    <a class="btn btn-primary dropdown-toggle me-2 btn-text-overflow btn-height" href="#" role="button" data-bs-toggle="dropdown">Summary</a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item text-center spin-it" asp-page="./Monthly">Month</a></li>
                        <li><a class="dropdown-item text-center spin-it" asp-page="./Annual">Annual</a></li>
                        <li><a class="dropdown-item text-center spin-it" asp-page="./AllTime">All Time</a></li>
                    </ul>
                </div>
                <button class="btn btn-primary dropdown-toggle btn-height" type="button" data-bs-toggle="dropdown">Add</button>
                <ul class="dropdown-menu">
                    <li>
                        <button class="dropdown-item text-center"
                                id="addExpenseButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addExpenseModal">
                            Expense
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item text-center"
                                id="addIncomeButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addIncomeModal">
                            Income
                        </button>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addMerchantButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addMerchantModal">
                            Merchant
                        </button>
                    </li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addMerchantButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addSourceModal">
                            Income Source
                        </button>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addIncomeCategoryButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addIncomeCategoryModal">
                            Income Category
                        </button>
                    </li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addSubCategoryButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addSubCategoryModal">
                            Expense Category
                        </button>
                    </li>
                    <li class="dropdown-item">
                        <button class="dropdown-item text-center"
                                id="addMainCategoryButton"
                                data-bs-toggle="modal"
                                data-bs-target="#addMainCategoryModal">
                            Main Category
                        </button>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li>
                        <button class="dropdown-item text-center"
                                id="importCsvButton"
                                data-bs-toggle="modal"
                                data-bs-target="#importCsvModal">
                            Import Transactions
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        @if (!incomeORExpenseDataIsPresent)
        {
            <div class="d-flex justify-content-center col mt-4">
                <div class="alert alert-dismissible alert-warning col-auto text-center">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <h3 class="mb-4"><strong>You have no data available to display.</strong></h3>
                    <p>
                        Get started by
                        <button class="white-text-button" data-bs-toggle="modal" data-bs-target="#importCsvModal">Importing Data</button>,
                        adding
                        <button class="white-text-button" data-bs-toggle="modal" data-bs-target="#addExpenseModal">Expenses</button>, or
                        <button class="white-text-button" data-bs-toggle="modal" data-bs-target="#addIncomeModal">Income</button>.
                </p>
                </div>
            </div>
        }
        @if (incomeORExpenseDataIsPresent)
            {
            <div class="col-6 col-lg-3 mt-1 d-flex flex-column align-content-center">
                <ul class="list-group text-center mt-2 shadow flex-fill d-flex justify-content-between">
                        <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                            <span class="d-none d-md-block">
                                Earned: &nbsp;
                            </span>
                            <span class="fw-bold text-primary responsive-text">
                                @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.Earned)
                            </span>
                        </li>
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                            <span class="d-none d-md-block">
                                Spent:
                            </span>
                            <span class="fw-bold text-primary responsive-text">
                                @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.Spent)
                            </span>
                        </li>
                    <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                            <span class="d-none d-md-block">
                                Saved:
                            </span>
                            <span class="fw-bold text-primary responsive-text">
                                @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.Saved)
                            </span>
                        </li>
                        <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                            <span class="d-none d-md-block">
                                Savings Goal:
                            </span>
                            @if (Model.SummaryResponse.AnnualSummary.SavingsGoalProgress < 0)
                            {
                                <span class="fw-bold responsive-text text-danger">
                                    @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.SavingsGoalProgress) &#37;
                                </span>
                            }
                            else
                            {
                                <span class="fw-bold text-primary responsive-text">
                                    @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.SavingsGoalProgress) &#37;
                                </span>
                            }
                        </li>
                        <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                        @if (Model.Year == DateTime.Now.Year)
                        {
                            <span class="d-none d-md-block">
                                Monthly Savings to Meet Goal:
                            </span>
                            <span class="fw-bold text-primary responsive-text">
                                @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.SuggestedMonthlySavingsToMeetGoal)
                            </span>
                        }
                        else
                        {
                            <span class="d-none d-md-block">
                                Average Monthly Savings:
                            </span>
                            <span class="fw-bold text-primary responsive-text">
                                @String.Format("{0:n}", Model.SummaryResponse.AnnualSummary.AveragedSavedPerMonth)
                            </span>
                        }
                        </li>
                        <li class="flex-fill list-group-item d-flex justify-content-between p-3">
                            <span class="d-none d-md-block">
                                Budget Variance:
                            </span>
                            <span class="fw-bold text-primary responsive-text">
                                @Model.SummaryResponse.AnnualSummary.BudgetVariance.ToString("P", CultureInfo.InvariantCulture)
                            </span>
                        </li>
                    </ul>
                </div>
            }
        @if (incomeORExpenseDataIsPresent)
        {
            <div class="col-6 col-lg-3 d-flex">
                <canvas id="overallSummaryChart" class="shadow align-self-center chart-height pt-2"></canvas>
            </div>
        }
        @if(expenseDataIsPresent)
        {
            <div class="col-12 col-lg-6 d-flex">
                <canvas id="monthlyStatisticsChart" class="chart-height shadow align-self-center"></canvas>
            </div>
        }
    </div>
    <div class="row mb-2">
        @if (incomeANDExpenseDataIsPresent)
        {
            <div class="col-12 col-lg-6 d-flex">
                <canvas id="savingsChart" class="chart-height shadow align-self-center"></canvas>
            </div>
        }
        @if (incomeORExpenseDataIsPresent)
        {
            <div class="col-12 col-lg-6 d-flex">
                <canvas id="incomeExpenseChart" class="chart-height shadow align-self-center"></canvas>
            </div>
        }
    </div>
    <div class="row gx-5">
        @if (expenseDataIsPresent)
        {
            <div class="col-12 col-lg-6 my-3">
                <div class="row shadow">
                    <div class="col-6 pie-stats">
                        <div class="d-flex justify-content-center">
                            <span class="mb-0 fw-bold d-none d-lg-block">Top Expenses</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Expenses/Index" asp-route-Query="4" asp-route-Q="@Model.Year" asp-route-PageNumber="1">
                                View All
                        </a>
                        </div>
                <div class="table-responsive-lg">
                    <table class="table table-sm align-middle text-center mb-0">
                        <thead class="p-0 m-0">
                            <tr>
                                <th class="p-0 m-0">
                                    Date
                                </th>
                                <th class="p-0 m-0">
                                    Amount
                                </th>
                                <th class="p-0 m-0">
                                    Category
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expense in @Model.SummaryResponse.TopExpenses)
                            {
                                <tr>
                                    <td>
                                        @expense.Date
                                    </td>
                                    <td>
                                        @String.Format("{0:n}", expense.Amount)
                                    </td>
                                    <td>
                                        @expense.SubCategory
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                </div>
                @if (Model.SummaryResponse.SubCategoryPercentages != null && Model.SummaryResponse.SubCategoryPercentages.Values.Sum() > 0)
                {
                    <div class="col-6 d-flex">
                            <canvas id="subCategoryPie" class="chart-height align-self-center"></canvas>
                    </div>
                }
                </div>
            </div>
        }
        @if (expenseDataIsPresent)
        {
            <div class="col-12 col-lg-6 my-3">
                <div class="row shadow">
                    <div class="col-6 pie-stats">
                        <div class="d-flex justify-content-center">
                            <span class="mb-0 fw-bold d-none d-lg-block">Top Categories</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Expenses/Categories/Index" asp-route-Query="3" asp-route-Q2=true asp-route-PageNumber="1">
                                View All
                            </a>
                        </div>
                        <div class="table-responsive-lg">
                            <table class="table table-sm align-middle text-center mb-0">
                                <thead class="p-0 m-0">
                                    <tr>
                                        <th class="p-0 m-0">
                                            Category
                                        </th>
                                        <th class="p-0 m-0">
                                            Amount
                                        </th>
                                        <th class="p-0 m-0">
                                            Count
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var expense in @Model.SummaryResponse.TopCategories)
                                    {
                                        <tr>
                                            <td>
                                                @expense.Name
                                            </td>
                                            <td>
                                                @String.Format("{0:n}", expense.Amount)
                                            </td>
                                            <td>
                                                @expense.Count
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    @if (expenseDataIsPresent)
                    {
                        <div class="col-6 d-flex">
                            <canvas id="mainCategoryPie" class="chart-height align-self-center"></canvas>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    <div class="row gx-5">
        @if(expenseDataIsPresent)
        {
        <div class="col-12 col-lg-6 my-3">
            <div class="row shadow">
                    <div class="col-6 pie-stats">
                    <div class="d-flex justify-content-center">
                        <span class="mb-0 fw-bold d-none d-lg-block">Top Merchants</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Merchants/Index" asp-route-Query="3" asp-route-Q2=true asp-route-PageNumber="1">
                            View All
                        </a>
                    </div>
                    <div class="table-responsive-lg">
                        <table class="table table-sm align-middle text-center mb-0">
                            <thead class="p-0 m-0">
                                <tr>
                                    <th class="p-0 m-0">
                                        Merchant
                                    </th>
                                    <th class="p-0 m-0">
                                        Amount
                                    </th>
                                    <th class="p-0 m-0">
                                        Count
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var expense in @Model.SummaryResponse.TopMerchants)
                                {
                                    <tr>
                                        <td>
                                            @expense.Name
                                        </td>
                                        <td>
                                            @String.Format("{0:n}", expense.Amount)
                                        </td>
                                        <td>
                                            @expense.Count
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                @if (expenseDataIsPresent)
                {
                    <div class="col-6 d-flex">
                            <canvas id="merchantPie" class="chart-height align-self-center"></canvas>
                    </div>
                }
            </div>
        </div>
        }
        @if (incomeDataIsPresent)
        {
            <div class="col-12 col-lg-6 my-3">
                <div class="row shadow">
                    <div class="col-6 pie-stats">
                        <div class="d-flex justify-content-center">
                            <span class="mb-0 fw-bold d-none d-lg-block">Top Income Sources</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="link-success float-end text-decoration-underline" asp-page="./Sources/Index" asp-route-PageNumber="1">
                                View All
                            </a>
                        </div>
                        <div class="table-responsive-lg">
                            <table class="table table-sm align-middle text-center mb-0">
                                <thead class="p-0 m-0">
                                    <tr>
                                        <th class="p-0 m-0">
                                            Source
                                        </th>
                                        <th class="p-0 m-0">
                                            Amount
                                        </th>
                                        <th class="p-0 m-0">
                                            Count
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var expense in @Model.SummaryResponse.TopSources)
                                    {
                                        <tr>
                                            <td>
                                                @expense.Name
                                            </td>
                                            <td>
                                                @String.Format("{0:n}", expense.Amount)
                                            </td>
                                            <td>
                                                @expense.Count
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    @if (Model.SummaryResponse.IncomeSourcePercentages != null && Model.SummaryResponse.IncomeSourcePercentages.Values.Sum() > 0)
                    {
                        <div class="col-6 d-flex">
                            <canvas id="incomeSourcePie" class="chart-height align-self-center"></canvas>
                        </div>
                    }
                </div>
            </div>
        }

    </div>
    <div class="row mb-3">
        @if (incomeORExpenseDataIsPresent && DateTime.Now.Month > 1)
        {
            <div class="col d-flex">
                <canvas id="annualMonthlySummaryChart" class="chart-height align-self-center shadow"></canvas>
            </div>
        }
    </div>
</div>
@await Html.PartialAsync("TransactionBreakdownModal", new TransactionBreakdownModal()
{
    Year = Model.Year,
    Month= 0,
    Transactions = Model.SummaryResponse.TransactionBreakdown
})
@* Add Expense Modal *@
<div class="modal fade" id="addExpenseModal">
    @await Html.PartialAsync("AddEditExpenseModal",
    new AddEditExpenseModal() {
    IsEdit = false,
    ReturnUrl = "~/Annual",
    SubCategoryList = new SelectList(Model.SubCategoryList, "Id", "Category"),
    Date= DateTime.Today,
    MainCategoryList = new SelectList(Model.MainCategoryList, "Id", "Category"),
    PageNumber = 1,
    Query = 0,
    Q = "",
    Q2 = "",
    ShowAddCategoryButton = false
    });
</div>
@*End Add Expense Modal*@
@* Add Income Modal *@
<div class="modal fade" id="addIncomeModal">
    @await Html.PartialAsync("AddEditIncomeModal", new AddEditIncomeModal(){
    ReturnUrl = "~/Annual",
    IsEdit = false,
    CategoryList = new SelectList(Model.IncomeCategoryList, "Id", "Category"),
    Date= DateTime.Today,
    ShowAddCategoryButton = false,
    PageNumber = 1,
    Q = string.Empty,
    Query= 0
    });
</div>
@*End Add Income Modal*@
@*Add Merchant Modal*@
<div class="modal fade" id="addMerchantModal">
    @await Html.PartialAsync("AddEditMerchantModal", new AddEditMerchantModal() {
    ReturnUrl = "~/Annual",
    SuggestOnLookup = true,
    IsEdit = false
    })
</div>
@*EndAdd Merchant Modal*@
@*Add Income Source Modal*@
<div class="modal fade" id="addSourceModal">
    @await Html.PartialAsync("AddEditIncomeSourceModal", new AddEditIncomeSourceModal()
    {
    ReturnUrl = "~/Annual",
    IsEdit = false,
    SuggestOnLookup = true
    })
</div>
@*End Add Income Source Modal*@
@*Add Sub Category Modal*@
<div class="modal fade" id="addSubCategoryModal">
    @await Html.PartialAsync("AddEditSubCategoryModal", new AddEditSubCategoryModal()
    { ReturnUrl="~/Annual",
    InUse=true,
    IsEdit=false,
    MainCategoryList=new SelectList(Model.MainCategoryList, "Id", "Category"),

    })
</div>
@*End Sub Category Modal*@
@*Add Main Category Modal*@
<div class="modal fade" id="addMainCategoryModal">
    @await Html.PartialAsync("AddEditMainCategoryModal", new AddEditMainCategoryModal() {
    ReturnUrl = "~/Annual",
    IsEdit = false});
</div>
@*EndAdd Main Category Modal*@
@*Add Income Category Modal*@
<div class="modal fade" id="addIncomeCategoryModal">
    @await Html.PartialAsync("AddEditIncomeCategoryModal",
    new AddEditIncomeCategoryModal() {
    ReturnUrl = "~/Annual",
    InUse = true,
    IsEdit = false,
    })
</div>
@*End Add Income Category Modal*@
@*Import Transactions Modal*@
<div class="modal fade" id="importCsvModal">
    @await Html.PartialAsync("ImportTransactionsModal", new ImportModel() { ReturnUrl = "~/Annual" })
</div>
@*End Import Transactions Modal*@
@section Scripts {
    <script src="~/js/annual.js"></script>
    <script asp-append-version="true" src="https://cdn.jsdelivr.net/npm/chart.js@4.1.1/dist/chart.umd.js"></script>
    @await Html.PartialAsync("OverallSummaryChart", new OverallSummaryChart()
    {
        ElementId = "overallSummaryChart",
        Title = Model.Year.ToString(),
        Labels = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.Labels),
        BudgetedIncome = Model.SummaryResponse.OverallSummaryChart.BudgetedIncome,
        RealizedIncome = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedIncome),
        BudgetedExpenses = Model.SummaryResponse.OverallSummaryChart.BudgetedExpenses,
        RealizedExpenses = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedExpenses),
        BudgetedSavings = Model.SummaryResponse.OverallSummaryChart.BudgetedSavings,
        RealizedSavings = JsonSerializer.Serialize(Model.SummaryResponse.OverallSummaryChart.RealizedSavings)
    })
    @if(expenseDataIsPresent)
    {
    @await Html.PartialAsync("_ChartPartial", new _ChartPartial()
    {
        ChartType = ChartType.LineMultiAxis,
        UseDefaultColor = true,
        ElementId = "monthlyStatisticsChart",
        Labels = JsonSerializer.Serialize(Model.SummaryResponse.MonthlyExpenseStatistics.Select(x => x.Month).ToArray()),
        Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MonthlyExpenseStatistics.Select(x => x.Count).ToArray()).Replace(int.MaxValue.ToString(), "NaN"),
        Dataset2 = JsonSerializer.Serialize(Model.SummaryResponse.MonthlyExpenseStatistics.Select(x => x.Average).ToArray()).Replace(int.MaxValue.ToString(), "NaN"),
        Dataset3 = JsonSerializer.Serialize(Model.SummaryResponse.MonthlyExpenseStatistics.Select(x => x.Min).ToArray()).Replace(int.MaxValue.ToString(), "NaN"),
        Dataset4 = JsonSerializer.Serialize(Model.SummaryResponse.MonthlyExpenseStatistics.Select(x => x.Max).ToArray()).Replace(int.MaxValue.ToString(), "NaN"),
        Title = "Monthly Expense Statistics",
        Responsive = true
    })
    }
    @if (incomeANDExpenseDataIsPresent)
    {
        @await Html.PartialAsync("AnnualSavingsChart", new AnnualSavingsChart()
        {
            ElementId = "savingsChart",
            Dataset = Model.SummaryResponse.SavingsChart.SavingsDataset,
            SuggestedSavingsDataset = Model.SummaryResponse.SavingsChart.SuggestedSavingsDataset,
            MonthBudgetDataBegins = Model.SummaryResponse.SavingsChart.MonthBudgetDataBegins,
            Title = "Annual Savings",
            Labels = Model.SummaryResponse.SavingsChart.Labels,
        })
    }
    @if (incomeORExpenseDataIsPresent)
    {
        @await Html.PartialAsync("AnnualIncomeExpenseChart", new AnnualIncomeExpenseChart()
        {
            ElementId = "incomeExpenseChart",
            IncomeDataset = Model.SummaryResponse.IncomeExpenseChart.IncomeDataset,
            MonthBudgetIncomeDataBegins = Model.SummaryResponse.IncomeExpenseChart.MonthBudgetIncomeDataBegins,
            ExpenseDataset = Model.SummaryResponse.IncomeExpenseChart.ExpensesDataset,
            MonthBudgetExpenseDataBegins = Model.SummaryResponse.IncomeExpenseChart.MonthBudgetExpenseDataBegins,
            Title = "Income And Expenses",
            Labels = Model.SummaryResponse.IncomeExpenseChart.Labels,
        })
    }
    @if (expenseDataIsPresent)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.SubCategoryPercentages.Select(x => x.Key).ToArray()))
    {
        ElementId = "subCategoryPie",
        Dataset = JsonSerializer.Serialize(Model.SummaryResponse.SubCategoryPercentages.Select(x => x.Value).ToArray()),
        Title = "Sub Category Percentages",
        IsSummaryChart = true
    })
    }
    @if (expenseDataIsPresent)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.MainCategoryPercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "mainCategoryPie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MainCategoryPercentages.Select(x => x.Value).ToArray()),
            Title = "Main Category Percentages",
            IsSummaryChart = true
        })
    }
    @if (expenseDataIsPresent)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.MerchantPercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "merchantPie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.MerchantPercentages.Select(x => x.Value).ToArray()),
            Title = "Merchant Percentages",
            IsSummaryChart = true
        })
    }
    @if (incomeDataIsPresent)
    {
        @await Html.PartialAsync("CategoryPieChart", new CategoryPieChart(JsonSerializer.Serialize(Model.SummaryResponse.IncomeSourcePercentages.Select(x => x.Key).ToArray()))
        {
            ElementId = "incomeSourcePie",
            Dataset = JsonSerializer.Serialize(Model.SummaryResponse.IncomeSourcePercentages.Select(x => x.Value).ToArray()),
            Title = "Income Category Percentages",
            IsSummaryChart = true
        })
    }
    @if (incomeORExpenseDataIsPresent && DateTime.Now.Month > 1)
    {
        @await Html.PartialAsync("AnnualMonthlySummaryChart", new AnnualMonthlySummaryChart()
        {
            IncomeDataset = Model.SummaryResponse.AnnualMonthlySummaryChart.IncomeDataset,
            ExpenseDataset = Model.SummaryResponse.AnnualMonthlySummaryChart.ExpenseDataset,
            SavingsDataset = Model.SummaryResponse.AnnualMonthlySummaryChart.SavingsDataset,
            BudgetedIncomeDataset = Model.SummaryResponse.AnnualMonthlySummaryChart.BudgetedIncomeDataset,
            BudgetedExpenseDataset = Model.SummaryResponse.AnnualMonthlySummaryChart.BudgetedExpenseDataset,
            BudgetedSavingsDataset = Model.SummaryResponse.AnnualMonthlySummaryChart.BudgetedSavingsDataset,
            ElementId = "annualMonthlySummaryChart",
            Title = "Monthly Summary"
        })
    }
}